# Import libraries
import pandas as pd import numpy as np
import yfinance as yf

# Use the ‘yfinance‘ library to download the front month S&P500 futures price data.
sp500_futures = yf.download(’ES=F’)
# Calculate the daily logarithmic returns of the futures prices.
sp500_futures[’Log_Returns’] = np.log(sp500_futures[’Adj Close’] / sp500_futures[’Adj Close’].shift(1))
annualized_return = sp500_futures[’Log_Returns’].mean() * 252
print("annualized_return:", annualized_return)
std_return = sp500_futures[’Log_Returns’].std()
# Adding vertical lines for mean and standard deviations
# Determine the number of bins for the histogram
max_daily_return = np.round(sp500_futures[’Log_Returns’]. max () , 2)
min_daily_return = np.round(sp500_futures[’Log_Returns’]. min () , 2)
n_bins = int((max_daily_return - min_daily_return) * 100)
# Plot a histogram of the logarithmic returns
plt.hist(sp500_futures[’Log_Returns’], bins=n_bins, color= "orange", label="Return Distribution")
# Add a vertical dashed line to indicate the mean of thereturns
plt.axvline(mean_return , color=’black’, linestyle=’dashed’ , linewidth=2, label="Mean Return")
for i in range(1, 4):
plt.axvline(mean_return + i * std_return , color=’green ’, linestyle=’dashed’, linewidth=1, label=f"+{i} STD")
plt.axvline(mean_return - i * std_return , color=’red’, linestyle=’dashed’, linewidth=1, label=f"-{i} STD")
# Configure the plot
plt.title(’Histogram of S&P 500 Futures Logarithmic Returns’)
plt.xlabel(’Logarithmic Returns’) plt.ylabel(’Frequency (log)’)
plt.yscale("log")
plt.gca().yaxis.set_major_formatter(ticker.
StrMethodFormatter(’{x:,.0f}’)) # Format y-axis labels as integers
plt.legend()
# Display the plot
 plt.show()
